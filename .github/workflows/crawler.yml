name: Daily KFCC Crawler

on:
  schedule:
    # 매일 오후 5시 (UTC)에 실행 (한국시간 오전 2시)
    - cron: '0 17 * * *'
  workflow_dispatch:
    inputs:
      cleanup_days:
        description: '정리할 오래된 데이터 일수'
        required: false
        default: '365'
        type: string
      collect_grades:
        description: '경영실태평가 수집 여부'
        required: false
        default: false
        type: boolean

concurrency:
  group: daily-kfcc-crawler
  cancel-in-progress: false

jobs:
  crawl:
    runs-on: ubuntu-latest
    timeout-minutes: 180
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Create data directories
        run: |
          mkdir -p data/rates
          mkdir -p logs
      
      - name: Run crawler (with retry)
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 60
          max_attempts: 3
          command: |
            if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
              python src/main.py --cleanup ${{ github.event.inputs.cleanup_days }}
            else
              python src/main.py --cleanup 30
            fi
        env:
          TZ: Asia/Seoul
      
      - name: Collect grade evaluations (January and July) (with retry)
        if: github.event.schedule == '0 5 15 1 *' || github.event.schedule == '0 5 15 7 *' || (github.event_name == 'workflow_dispatch' && github.event.inputs.collect_grades == 'true')
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 30
          max_attempts: 3
          command: |
            python src/main.py --grades
        env:
          TZ: Asia/Seoul
          GITHUB_ACTIONS: true
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          INPUT_COLLECT_GRADES: ${{ github.event.inputs.collect_grades }}
      
      - name: Check for changes
        id: verify-changed-files
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Commit and push changes
        if: steps.verify-changed-files.outputs.changed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add data/
          # CNAME 파일이 있다면 추가 (Custom Domain 보존)
          if [ -f "CNAME" ]; then
            git add CNAME
          fi
          git commit -m "Daily crawl: $(TZ=Asia/Seoul date +'%Y-%m-%d %H:%M:%S KST')" || exit 0
          git push
      
      - name: Upload data as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: kfcc-data-${{ github.run_number }}
          path: data/
          retention-days: 7
      
      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ 크롤링이 실패했습니다. 로그를 확인해주세요."
          echo "실행 시간: $(date)"
          echo "워크플로우 URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"